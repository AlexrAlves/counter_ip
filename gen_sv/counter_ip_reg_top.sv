// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

`include "prim_assert.sv"

module counter_ip_reg_top #(
  parameter type reg_req_t = logic,
  parameter type reg_rsp_t = logic
) (
  input clk_i,
  input rst_ni,

  // Below Register interface can be changed
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output counter_ip_reg_pkg::counter_ip_reg2hw_t reg2hw, // Write
  input  counter_ip_reg_pkg::counter_ip_hw2reg_t hw2reg, // Read

  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import counter_ip_reg_pkg::* ;

  localparam int AW = 4;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  reg_req_t reg_intf_req;
  reg_rsp_t reg_intf_rsp;

  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;

  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr;
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err ;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic [15:0] dtin_wd;
  logic dtin_we;
  logic [15:0] ctout_qs;
  logic ctout_re;
  logic ctrl_reset_wd;
  logic ctrl_reset_we;
  logic ctrl_load_wd;
  logic ctrl_load_we;
  logic ctrl_en_wd;
  logic ctrl_en_we;

  // Register instances
  // R[dtin]: V(True)

  prim_subreg_ext #(
    .DW    (16)
  ) u_dtin (
    .re     (1'b0),
    .we     (dtin_we),
    .wd     (dtin_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.dtin.qe),
    .q      (reg2hw.dtin.q ),
    .qs     ()
  );


  // R[ctout]: V(True)

  prim_subreg_ext #(
    .DW    (16)
  ) u_ctout (
    .re     (ctout_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.ctout.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (ctout_qs)
  );


  // R[ctrl]: V(True)

  //   F[reset]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_ctrl_reset (
    .re     (1'b0),
    .we     (ctrl_reset_we),
    .wd     (ctrl_reset_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.ctrl.reset.qe),
    .q      (reg2hw.ctrl.reset.q ),
    .qs     ()
  );


  //   F[load]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_ctrl_load (
    .re     (1'b0),
    .we     (ctrl_load_we),
    .wd     (ctrl_load_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.ctrl.load.qe),
    .q      (reg2hw.ctrl.load.q ),
    .qs     ()
  );


  //   F[en]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_ctrl_en (
    .re     (1'b0),
    .we     (ctrl_en_we),
    .wd     (ctrl_en_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.ctrl.en.qe),
    .q      (reg2hw.ctrl.en.q ),
    .qs     ()
  );




  logic [2:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[0] = (reg_addr == COUNTER_IP_DTIN_OFFSET);
    addr_hit[1] = (reg_addr == COUNTER_IP_CTOUT_OFFSET);
    addr_hit[2] = (reg_addr == COUNTER_IP_CTRL_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = 1'b0;
    if (addr_hit[0] && reg_we && (COUNTER_IP_PERMIT[0] != (COUNTER_IP_PERMIT[0] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[1] && reg_we && (COUNTER_IP_PERMIT[1] != (COUNTER_IP_PERMIT[1] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[2] && reg_we && (COUNTER_IP_PERMIT[2] != (COUNTER_IP_PERMIT[2] & reg_be))) wr_err = 1'b1 ;
  end

  assign dtin_we = addr_hit[0] & reg_we & ~wr_err;
  assign dtin_wd = reg_wdata[15:0];

  assign ctout_re = addr_hit[1] && reg_re;

  assign ctrl_reset_we = addr_hit[2] & reg_we & ~wr_err;
  assign ctrl_reset_wd = reg_wdata[0];

  assign ctrl_load_we = addr_hit[2] & reg_we & ~wr_err;
  assign ctrl_load_wd = reg_wdata[1];

  assign ctrl_en_we = addr_hit[2] & reg_we & ~wr_err;
  assign ctrl_en_wd = reg_wdata[2];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[15:0] = '0;
      end

      addr_hit[1]: begin
        reg_rdata_next[15:0] = ctout_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
        reg_rdata_next[2] = '0;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Assertions for Register Interface

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))


endmodule
